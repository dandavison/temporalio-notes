explanation: |md
  Each state comprises 3 substates, arranged vertically. These are:
  - `UpdateRegistry` entry
  - mutable state `UpdateInfo` entry
  - history events

  \+ indicates that the request payload is present.
| {near: top-left}

∅ -> Admitted: New()
Admitted -> Requested+: attach request payload
Requested+ -> Sent+: Send()
Sent+ -> Accepted+: worker sends\naccept msg
Accepted+ -> Completed+: worker sends\ncomplete msg
Sent+ -> Rejected+: worker sends\nreject msg

Admitted -> ∅: lose registry
Requested+ -> ∅: lose registry
Sent+ -> ∅: lose registry
# Accepted+ -> Accepted+: lose registry

∅ -> fail-wft: worker sends\naccept/reject msg

∅: {
  label: ∅\n∅\n∅\n
}
Sent+: {
  label: Sent+\n∅\n∅
}
Admitted: {
  label: Admitted\n∅\n∅
}
Requested+: {
  label: Requested+\n∅\n∅
}
Accepted+: {
  label: Accepted+\nAccepted\nUA+
}
Completed+: {
  label: Completed+\n∅\nUA+,UC
}
Rejected+: {
  label: Completed+\n∅\n∅
}
fail-wft: {
  label: ERROR\n(fail WFT)
  style.font-color: red
}

# With reapplied updates
Completed+ -> ReappliedR: reapply
Accepted+ -> ReappliedR: reapply
Rejected+ -> bug-reapply-rejected: reapply
ReappliedR -> ReappliedRA: worker sends\naccept msg
ReappliedRA -> ReappliedRAC: worker sends\ncomplete msg
ReappliedRA -> ReappliedRAJ: worker sends\nreject msg

# Multiple reapplies
ReappliedR -> ReappliedR: reapply
ReappliedRA -> ReappliedR: reapply
ReappliedRAC -> ReappliedR: reapply
ReappliedRAJ -> ReappliedR: reapply\n(rejected reapplied update\ncan be reapplied!)

# Reapply states
ReappliedR: {
  label: Requested\nRequested\nUR+
}
ReappliedRA: {
  label: Accepted\nAccepted\nUR+,UA
}
ReappliedRAC: {
  label: Completed\nCompleted\nUR+,UA,UC
}
ReappliedRAJ: {
  label: Completed\nCompleted\nUR+,UA,UJ
}
bug-reapply-rejected: {
  label: TEMPORAL FLAW\n(rejected update\ncannot be reapplied)
  style.font-color: red
}
