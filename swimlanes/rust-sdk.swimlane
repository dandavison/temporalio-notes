Title: Temporal Rust SDK

Wf Activations polling loop -> sdk-core: `poll_workflow_activation`
note Wf Activations polling loop:
receive activation from server:  
[`Worker.workflow_activation_handler`](vscode-insiders://file/Users/dan/tmp/3p/temporalio/sdk-python/temporalio/bridge/sdk-core/sdk/src/lib.rs:296)

note:
Activation is for a new workflow execution:  
[create Wf future](vscode-insiders://file/Users/dan/tmp/3p/temporalio/sdk-python/temporalio/bridge/sdk-core/sdk/src/lib.rs:406)
and
[send](vscode-insiders://file/Users/dan/tmp/3p/temporalio/sdk-python/temporalio/bridge/sdk-core/sdk/src/lib.rs:302) it to stream processor for submission to Tokio.

note WorkflowFuture:
[`start_workflow()`](vscode-insiders://file/Users/dan/tmp/3p/temporalio/sdk-python/temporalio/bridge/sdk-core/sdk/src/lib.rs:456)  

WorkflowFuture -> WorkflowFunction: create
note WorkflowFunction: 
[Create](vscode-insiders://file/Users/dan/tmp/3p/temporalio/sdk-python/temporalio/bridge/sdk-core/sdk/src/workflow_future.rs:65) a `WorkflowFunction` future by calling the user's async workflow function with:
- a `WfContext` instance, with  
  - an `incoming_commands` send handle.

note WorkflowFuture:
[Create](vscode-insiders://file/Users/dan/tmp/3p/temporalio/sdk-python/temporalio/bridge/sdk-core/sdk/src/workflow_future.rs:60) a `WorkflowFuture` with:
- the `WorkflowFunction` future 
- `incoming_commands` receive handle
- `incoming_activations` receive handle

The `incoming_activations` send handle is stored in `Worker.workflows`.


note Wf Activations polling loop:
[send](vscode-insiders://file/Users/dan/tmp/3p/temporalio/sdk-python/temporalio/bridge/sdk-core/sdk/src/lib.rs:425) activation to Wf future incoming activations channel.

Wf Activations polling loop -> WorkflowFuture:


Tokio -> WorkflowFuture: `poll()`
note WorkflowFuture:
[`poll()`](vscode-insiders://file/Users/dan/tmp/3p/temporalio/sdk-python/temporalio/bridge/sdk-core/sdk/src/workflow_future.rs:440)

1. For every job in the activation:
[`handle_job(job)`](vscode-insiders://file/Users/dan/tmp/3p/temporalio/sdk-python/temporalio/bridge/sdk-core/sdk/src/workflow_future.rs:468)  
(available [job Variants](vscode-insiders://file/Users/dan/tmp/3p/temporalio/sdk-python/temporalio/bridge/sdk-core/target/aarch64-apple-darwin/debug/build/temporal-sdk-core-protos-5d18df293f12871d/out/coresdk.workflow_activation.rs:55))  

  job: [StartWorkflow](vscode-insiders://file/Users/dan/tmp/3p/temporalio/sdk-python/temporalio/bridge/sdk-core/sdk/src/workflow_future.rs:158) (`handle_job` is a no-op)  
  

2. [Advance](vscode-insiders://file/Users/dan/tmp/3p/temporalio/sdk-python/temporalio/bridge/sdk-core/sdk/src/workflow_future.rs:488) Workflow function 


WorkflowFuture -> WorkflowFunction: `poll()`
note WorkflowFunction:Workflow code reaches an activity call:    
[`ctx
.activity(activity_opts)
.await`](vscode-insiders://file/Users/dan/tmp/3p/temporalio/sdk-python/temporalio/bridge/sdk-core/sdk/src/workflow_context.rs:204)

In `ctx.activity` we do two things:

1. Send a `ScheduleActivity` [command](vscode-insiders://file/Users/dan/tmp/3p/temporalio/sdk-python/temporalio/bridge/sdk-core/target/aarch64-apple-darwin/debug/build/temporal-sdk-core-protos-5d18df293f12871d/out/coresdk.workflow_commands.rs:23) to the `WorkflowFuture`, using our `incoming_commands` send handle. The command contains the [send end](vscode-insiders://file/Users/dan/tmp/3p/temporalio/sdk-python/temporalio/bridge/sdk-core/sdk/src/workflow_context.rs:439) of an `unblocker` channel.

WorkflowFunction -> WorkflowFuture: `ScheduleActivity` command

note WorkflowFuture:

3. For every `incoming_command`, [add an entry](vscode-insiders://file/Users/dan/tmp/3p/temporalio/sdk-python/temporalio/bridge/sdk-core/sdk/src/workflow_future.rs:362) to `command_status` containing the `unblocker` for the command.

4. [send](vscode-insiders://file/Users/dan/tmp/3p/temporalio/sdk-python/temporalio/bridge/sdk-core/sdk/src/workflow_future.rs:507) the list of commands to the server as a `WorkflowActivationCompletion` proto.  
**TODO** what causes sdk-core to respond to [sending](vscode-insiders://file/Users/dan/tmp/3p/temporalio/sdk-python/temporalio/bridge/sdk-core/sdk/src/workflow_future.rs:142) the completion to `outgoing_completions`?

WorkflowFuture -> sdk-core: completion

note WorkflowFunction:2. Return a `WFCommandFut`, to be awaited in the workflow code. The future contains the receive end of the `unblocker` channel.
...:
_:
note __all__: **TODO**: activity task is received, activity is called, resulting in next workflow activation containing a `ResolveActivity` job.
Activity task polling loop -> Activity task polling loop: call activity
...:
_:

note Wf Activations polling loop:
receive activation from server:  
[`Worker.workflow_activation_handler`](vscode-insiders://file/Users/dan/tmp/3p/temporalio/sdk-python/temporalio/bridge/sdk-core/sdk/src/lib.rs:296)


note Wf Activations polling loop:
[send](vscode-insiders://file/Users/dan/tmp/3p/temporalio/sdk-python/temporalio/bridge/sdk-core/sdk/src/lib.rs:425) activation to Wf future incoming activations channel.

Wf Activations polling loop -> WorkflowFuture:

Tokio -> WorkflowFuture: `poll()`
note WorkflowFuture:

[`poll()`](vscode-insiders://file/Users/dan/tmp/3p/temporalio/sdk-python/temporalio/bridge/sdk-core/sdk/src/workflow_future.rs:440)

1. For every job in the activation:
[`handle_job()`](vscode-insiders://file/Users/dan/tmp/3p/temporalio/sdk-python/temporalio/bridge/sdk-core/sdk/src/workflow_future.rs:468)  
(available [job Variants](vscode-insiders://file/Users/dan/tmp/3p/temporalio/sdk-python/temporalio/bridge/sdk-core/target/aarch64-apple-darwin/debug/build/temporal-sdk-core-protos-5d18df293f12871d/out/coresdk.workflow_activation.rs:55))  


job: [ResolveActivity](vscode-insiders://file/Users/dan/tmp/3p/temporalio/sdk-python/temporalio/bridge/sdk-core/sdk/src/workflow_future.rs:164)

`handle_job()` calls [`unblock()`](vscode-insiders://file/Users/dan/tmp/3p/temporalio/sdk-python/temporalio/bridge/sdk-core/sdk/src/workflow_future.rs:116), and sends `UnblockEvent::Activity` to the `unblocker` (which had been stored in `command_status`)

WorkflowFuture -> WorkflowFunction: `UnblockEvent::Activity`

note WorkflowFuture:
2. [Advance](vscode-insiders://file/Users/dan/tmp/3p/temporalio/sdk-python/temporalio/bridge/sdk-core/sdk/src/workflow_future.rs:488) Workflow function 


WorkflowFuture -> WorkflowFunction: `poll()`

note WorkflowFunction:Recall that the workflow function is awaiting on `ctx.activity(act)`, and that this returns a `WFCommandFut`.

The [`WFCommandFut.poll()`](vscode-insiders://file/Users/dan/tmp/3p/temporalio/sdk-python/temporalio/bridge/sdk-core/sdk/src/workflow_context.rs:458) implementation handles the `UnblockEvent::Activity` by `take`-ing the `other_dat` (TODO: significance?) and calling [Unblockable::unblock](vscode-insiders://file/Users/dan/tmp/3p/temporalio/sdk-python/temporalio/bridge/sdk-core/sdk/src/lib.rs:616), the result of which is to return `Poll::Ready(act_result)`.

The workflow function thus advances beyond the activity call.
Wf completions stream processor -> Wf completions stream processor:
Activity task polling loop -> Activity task polling loop:


order: Tokio, Wf Activations polling loop, WorkflowFuture, WorkflowFunction, sdk-core, Wf completions stream processor, Activity task polling loop
